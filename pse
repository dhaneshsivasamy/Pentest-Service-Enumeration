#!/bin/bash
#
# Author: Steve Stonebraker
# Github: https://github.com/ssstonebraker/Pentest-Service-Enumeration
# Description: Store/retrieve a list of pentest commands to run against the specified service
#
#
VERSION=0.0.1
####################################
# Exit if program echo does not exist (this allows us to do one line if statements)
[ ! -x "$(which echo)" ] && exit 1
########################################
# pretty printing functions
function print_status { echo -e "\x1B[01;34m[*]\x1B[0m $1"; }
function print_good { echo -e "\x1B[01;32m[*]\x1B[0m $1"; }
function print_error { echo -e "\x1B[01;31m[*]\x1B[0m $1"; }
function print_notification { echo -e "\x1B[01;33m[*]\x1B[0m $1"; }
function print_notify { echo -e "\x1B[01;33m[*]\x1B[0m $1"; }
function print_info { echo -e "\x1B[01;33m[*]\x1B[0m $1"; }
function print_italics { echo -e "\x1B[01;3m$1\x1B[0m"; }
function printline { hr=----------------------------------------------------------------------------------------------------
printf '%s\n' "${hr:0:${COLUMNS:-$(tput cols)}}"
}
####################################
# print message and exit program
function die { print_error "$1" >&2;exit 1; }
######################################## 
SERVICE=$1
if [[ "$SERVICE" ==  "-v" ]]; then
        _V=1
        SERVICE=$2
else
        _V=0
fi
if [[ "$SERVICE" ==  "-a" ]]; then
        _A=1
        SERVICE=$2
else
        _A=0
fi

FULLCMD=${@:2}
SERVICES="$HOME/.pse"
SERVICEFILE="$HOME/.pse/$SERVICE"
function verify_directory_services_exists {
    # Make sure services directory exists
    if [ -z "$HOME" ]; then
       print_error "\$HOME variable not defined!"
       print_notification "Exiting"
       exit 1
    fi
    if [ ! -d $SERVICES ]; then
      print_notification "$SERVICES not found"
      mkdir $SERVICES && print_good "Created $SERVICES"  
    fi

    [ ! -d $SERVICES ] && print_error "Unable to create directory $SERVICES, exiting" && exit 1
}

function usage1 {
    echo "Pentest Service Enumeration: $VERSION"
    printline
    echo "LISTING EXISTING COMMANDS:"
    echo "Usage: pse <service-name> (Ex: ftp, rdp, http)"
    echo " -v: verbose - print command description"
    print_info "Examples: "
    print_good "pse ftp"
    print_good "pse -v ftp (for verbose)"
}

function usage2 {
    printline
    echo "STORING A NEW COMMAND WITH ARGUMENTS"
    echo "Usage: pse -a <service-name> <command> <arg1> <argX>"
    print_italics "note: You must escape any variables with a backslash"
    print_info "Examples:"
    print_good "pse -a rpcinfo \\\$IP"
    print_good "pse -a smb smbexec.py \\\$HOST/\\\$USERNAME:\\\$PASSWORD@\\\$IP"
}
function usage  {
    usage1
    usage2
}

function print_service {
    if [[  "$SERVICE" ==  "-h" ]]; then
        usage
        exit
    fi 
    if [[  "$SERVICE" ==  "-l" ]]; then
        print_info "pse stored service location: ${SERVICES}"
        print_notify "listing all services that have pse stored commands"
        ls ${SERVICES} | grep -v "sorted"
        exit
    fi 
    if [ ! -f $SERVICEFILE ]; then
       print_error "Documentation does not exist for $SERVICE, please add some"
       usage2
       printline
       set -o history
       history | grep $SERVICE
       printline
    else
# Actually Print Service Info
      sort -k2 --field-separator=, $SERVICEFILE > $SERVICEFILE.sorted
      SORTED=$SERVICEFILE.sorted
      while IFS="" read -r p || [ -n "$p" ]
      do
        DESCRIPTION=$(echo $p | awk -F, '{ print $1 }')
#        echo "DESCRIPTION: $DESCRIPTION"
      if [[ $_V -eq 1 ]]; then
          print_info "$DESCRIPTION"
      fi
        COMMAND=$(echo $p | awk -F, {'first = $1; $1=""; print $0'}|sed 's/^ //g')
#	echo "COMMAND: $COMMAND"
#	echo 'printing'
        print_good "$COMMAND"
#        awk '{ printf("%-40s %-60s\n", $COMMAND, $DESCRIPTION); }' 
#        printf '%s\n' "$p"
      done < $SORTED
    fi
    exit
}


function add_service {
    [ ! -f $SERVICEFILE ] && touch $SERVICEFILE
    COMMENT=""
    while [[ $COMMENT == '' ]] # While string is different or empty...
    do
    print_info "Please input a comment about this command"
    read -p 'Comment: ' COMMENT
    done
    echo $COMMENT,${FULLCMD} >> ${SERVICEFILE}
    echo "Appended service command successfully:"
    tail -n 1 ${SERVICEFILE}
    exit 0
}


# start execution
verify_directory_services_exists
    [ $# -eq 0 ]  && usage && exit
    [ $# -eq 1 ] && print_service

    if [[ $_V -eq 1 ]]; then
        print_service
    fi

    if [[ $_A -eq 1 ]]; then
        [ $# -eq 2 ] && print_error "you need to type something to add for ${SERVICE}" && usage2
        [ $# -gt 2 ] && add_service
    fi


